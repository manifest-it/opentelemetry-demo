name: Development Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      GIT_USER: ${{secrets.GIT_USER}}
      GIT_TOKEN: ${{secrets.GIT_TOKEN}}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
      AWS_TENANT_IAM_ROLE: ${{ secrets.AWS_TENANT_IAM_ROLE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
      AWS_ECR_REPOSITORY_FRONTEND: "opentelemetry-demo-frontend-non-prod"
      AWS_ECR_REPOSITORY_CHECKOUT: "opentelemetry-demo-checkoutservice-non-prod"
      AWS_ECR_REPOSITORY_PRODUCT_CATALOG: "opentelemetry-demo-productcatalogservice-non-prod"
      AWS_ECR_REPOSITORY_IMAGE: "opentelemetry-demo-imageprovider-non-prod"
      IMAGE_TAG: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS tenant Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_TENANT_IAM_ROLE }}

      - name: Login to AWS ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}

      - name: Build and push Docker image
        run: |

          docker build -f ./src/frontend/Dockerfile -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./
          docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_FRONTEND:$IMAGE_TAG 

          # docker build  -f ./src/checkoutservice/Dockerfile -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_CHECKOUT:$IMAGE_TAG  ./
          # docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_CHECKOUT:$IMAGE_TAG 

          # docker build -f ./src/productcatalogservice/Dockerfile -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_PRODUCT_CATALOG:$IMAGE_TAG  ./
          # docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_PRODUCT_CATALOG:$IMAGE_TAG 

          #docker build -f ./src/imageprovider/Dockerfile -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_IMAGE:$IMAGE_TAG  ./
          #docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_IMAGE:$IMAGE_TAG 

      - name: Deploy to development EKS cluster
        run: |
          aws eks update-kubeconfig --name mit-acme --region us-west-2
          # kubectl apply -f k8s/feature_flag.yaml -n otel-demo
          # kubectl apply -f k8s/deployment.yaml -n otel-demo
          # kubectl apply -f k8s/ingress.yaml -n otel-demo
          # kubectl rollout restart deployment/opentelemetry-demo-flagd -n otel-demo
          kubectl apply -f k8s/frontend.yaml -n otel-demo
          kubectl rollout restart deployment/opentelemetry-demo-frontend -n otel-demo
